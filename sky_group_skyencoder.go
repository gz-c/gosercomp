// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package gosercomp

import (
	"errors"
	math "math"

	"github.com/skycoin/skycoin/src/cipher/encoder"
)

// EncodeSizeSkyGroup computes the size of an encoded object of type SkyGroup
func EncodeSizeSkyGroup(obj *SkyGroup) int {
	i0 := 0

	// obj.Id
	i0 += 4

	// obj.Name
	i0 += 4 + len(obj.Name)

	// obj.Colors
	i0 += 4
	for _, x := range obj.Colors {
		i1 := 0

		// x
		i1 += 4 + len(x)

		i0 += i1
	}

	return i0
}

// EncodeSkyGroup encodes an object of type SkyGroup to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func EncodeSkyGroup(buf []byte, obj *SkyGroup) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.Id
	e.Int32(obj.Id)

	// obj.Name length check
	if len(obj.Name) > math.MaxUint32 {
		return errors.New("obj.Name length exceeds math.MaxUint32")
	}

	// obj.Name
	e.ByteSlice([]byte(obj.Name))

	// obj.Colors length check
	if len(obj.Colors) > math.MaxUint32 {
		return errors.New("obj.Colors length exceeds math.MaxUint32")
	}

	// obj.Colors length
	e.Uint32(uint32(len(obj.Colors)))

	// obj.Colors
	for _, x := range obj.Colors {

		// x length check
		if len(x) > math.MaxUint32 {
			return errors.New("x length exceeds math.MaxUint32")
		}

		// x
		e.ByteSlice([]byte(x))

	}

	return nil
}

// DecodeSkyGroup decodes an object of type SkyGroup from the buffer in encoder.Decoder.
// Returns the number of bytes used from the buffer to decode the object.
func DecodeSkyGroup(buf []byte, obj *SkyGroup) (int, error) {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.Id
		i, err := d.Int32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}
		obj.Id = i
	}

	{
		// obj.Name

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		obj.Name = string(d.Buffer[:length])
		d.Buffer = d.Buffer[length:]
	}

	{
		// obj.Colors

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		if length != 0 {
			obj.Colors = make([]string, length)

			for z1 := range obj.Colors {
				{
					// obj.Colors[z1]

					ul, err := d.Uint32()
					if err != nil {
						return len(buf) - len(d.Buffer), err
					}

					length := int(ul)
					if length < 0 || length > len(d.Buffer) {
						return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
					}

					obj.Colors[z1] = string(d.Buffer[:length])
					d.Buffer = d.Buffer[length:]
				}
			}
		}
	}

	return len(buf) - len(d.Buffer), nil
}
