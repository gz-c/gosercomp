// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package gosercomp

import (
	"github.com/glycerine/zebrapack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ZColorGroup) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields1zgensym_1ba4b50d48006101_2 = 3

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields1zgensym_1ba4b50d48006101_2 uint32
	totalEncodedFields1zgensym_1ba4b50d48006101_2, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft1zgensym_1ba4b50d48006101_2 := totalEncodedFields1zgensym_1ba4b50d48006101_2
	missingFieldsLeft1zgensym_1ba4b50d48006101_2 := maxFields1zgensym_1ba4b50d48006101_2 - totalEncodedFields1zgensym_1ba4b50d48006101_2

	var nextMiss1zgensym_1ba4b50d48006101_2 int = -1
	var found1zgensym_1ba4b50d48006101_2 [maxFields1zgensym_1ba4b50d48006101_2]bool
	var curField1zgensym_1ba4b50d48006101_2 int

doneWithStruct1zgensym_1ba4b50d48006101_2:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgensym_1ba4b50d48006101_2 > 0 || missingFieldsLeft1zgensym_1ba4b50d48006101_2 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgensym_1ba4b50d48006101_2, missingFieldsLeft1zgensym_1ba4b50d48006101_2, msgp.ShowFound(found1zgensym_1ba4b50d48006101_2[:]), decodeMsgFieldOrder1zgensym_1ba4b50d48006101_2)
		if encodedFieldsLeft1zgensym_1ba4b50d48006101_2 > 0 {
			encodedFieldsLeft1zgensym_1ba4b50d48006101_2--
			curField1zgensym_1ba4b50d48006101_2, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss1zgensym_1ba4b50d48006101_2 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss1zgensym_1ba4b50d48006101_2 = 0
			}
			for nextMiss1zgensym_1ba4b50d48006101_2 < maxFields1zgensym_1ba4b50d48006101_2 && (found1zgensym_1ba4b50d48006101_2[nextMiss1zgensym_1ba4b50d48006101_2] || decodeMsgFieldSkip1zgensym_1ba4b50d48006101_2[nextMiss1zgensym_1ba4b50d48006101_2]) {
				nextMiss1zgensym_1ba4b50d48006101_2++
			}
			if nextMiss1zgensym_1ba4b50d48006101_2 == maxFields1zgensym_1ba4b50d48006101_2 {
				// filled all the empty fields!
				break doneWithStruct1zgensym_1ba4b50d48006101_2
			}
			missingFieldsLeft1zgensym_1ba4b50d48006101_2--
			curField1zgensym_1ba4b50d48006101_2 = nextMiss1zgensym_1ba4b50d48006101_2
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgensym_1ba4b50d48006101_2)
		switch curField1zgensym_1ba4b50d48006101_2 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "id"
			found1zgensym_1ba4b50d48006101_2[0] = true
			z.Id, err = dc.ReadInt()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "name"
			found1zgensym_1ba4b50d48006101_2[1] = true
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "colors"
			found1zgensym_1ba4b50d48006101_2[2] = true
			var zgensym_1ba4b50d48006101_3 uint32
			zgensym_1ba4b50d48006101_3, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Colors) >= int(zgensym_1ba4b50d48006101_3) {
				z.Colors = (z.Colors)[:zgensym_1ba4b50d48006101_3]
			} else {
				z.Colors = make([]string, zgensym_1ba4b50d48006101_3)
			}
			for zgensym_1ba4b50d48006101_0 := range z.Colors {
				z.Colors[zgensym_1ba4b50d48006101_0], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgensym_1ba4b50d48006101_2 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ZColorGroup
var decodeMsgFieldOrder1zgensym_1ba4b50d48006101_2 = []string{"id", "name", "colors"}

var decodeMsgFieldSkip1zgensym_1ba4b50d48006101_2 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ZColorGroup) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.Id == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Name) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Colors) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ZColorGroup) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_1ba4b50d48006101_4 [3]bool
	fieldsInUse_zgensym_1ba4b50d48006101_5 := z.fieldsNotEmpty(empty_zgensym_1ba4b50d48006101_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_1ba4b50d48006101_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ZColorGroup'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x5a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70})
	if err != nil {
		return err
	}

	if !empty_zgensym_1ba4b50d48006101_4[0] {
		// zid 0 for "id"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Id)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_1ba4b50d48006101_4[1] {
		// zid 1 for "name"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Name)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_1ba4b50d48006101_4[2] {
		// zid 2 for "colors"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Colors)))
		if err != nil {
			return
		}
		for zgensym_1ba4b50d48006101_0 := range z.Colors {
			err = en.WriteString(z.Colors[zgensym_1ba4b50d48006101_0])
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ZColorGroup) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'ZColorGroup'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x5a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70})

	if !empty[0] {
		// zid 0 for "id"
		o = append(o, 0x0)
		o = msgp.AppendInt(o, z.Id)
	}

	if !empty[1] {
		// zid 1 for "name"
		o = append(o, 0x1)
		o = msgp.AppendString(o, z.Name)
	}

	if !empty[2] {
		// zid 2 for "colors"
		o = append(o, 0x2)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Colors)))
		for zgensym_1ba4b50d48006101_0 := range z.Colors {
			o = msgp.AppendString(o, z.Colors[zgensym_1ba4b50d48006101_0])
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ZColorGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *ZColorGroup) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_1ba4b50d48006101_7 = 3

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields6zgensym_1ba4b50d48006101_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_1ba4b50d48006101_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_1ba4b50d48006101_7 := totalEncodedFields6zgensym_1ba4b50d48006101_7
	missingFieldsLeft6zgensym_1ba4b50d48006101_7 := maxFields6zgensym_1ba4b50d48006101_7 - totalEncodedFields6zgensym_1ba4b50d48006101_7

	var nextMiss6zgensym_1ba4b50d48006101_7 int = -1
	var found6zgensym_1ba4b50d48006101_7 [maxFields6zgensym_1ba4b50d48006101_7]bool
	var curField6zgensym_1ba4b50d48006101_7 int

doneWithStruct6zgensym_1ba4b50d48006101_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_1ba4b50d48006101_7 > 0 || missingFieldsLeft6zgensym_1ba4b50d48006101_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_1ba4b50d48006101_7, missingFieldsLeft6zgensym_1ba4b50d48006101_7, msgp.ShowFound(found6zgensym_1ba4b50d48006101_7[:]), unmarshalMsgFieldOrder6zgensym_1ba4b50d48006101_7)
		if encodedFieldsLeft6zgensym_1ba4b50d48006101_7 > 0 {
			encodedFieldsLeft6zgensym_1ba4b50d48006101_7--
			curField6zgensym_1ba4b50d48006101_7, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss6zgensym_1ba4b50d48006101_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_1ba4b50d48006101_7 = 0
			}
			for nextMiss6zgensym_1ba4b50d48006101_7 < maxFields6zgensym_1ba4b50d48006101_7 && (found6zgensym_1ba4b50d48006101_7[nextMiss6zgensym_1ba4b50d48006101_7] || unmarshalMsgFieldSkip6zgensym_1ba4b50d48006101_7[nextMiss6zgensym_1ba4b50d48006101_7]) {
				nextMiss6zgensym_1ba4b50d48006101_7++
			}
			if nextMiss6zgensym_1ba4b50d48006101_7 == maxFields6zgensym_1ba4b50d48006101_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_1ba4b50d48006101_7
			}
			missingFieldsLeft6zgensym_1ba4b50d48006101_7--
			curField6zgensym_1ba4b50d48006101_7 = nextMiss6zgensym_1ba4b50d48006101_7
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_1ba4b50d48006101_7)
		switch curField6zgensym_1ba4b50d48006101_7 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "id"
			found6zgensym_1ba4b50d48006101_7[0] = true
			z.Id, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "name"
			found6zgensym_1ba4b50d48006101_7[1] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "colors"
			found6zgensym_1ba4b50d48006101_7[2] = true
			if nbs.AlwaysNil {
				(z.Colors) = (z.Colors)[:0]
			} else {

				var zgensym_1ba4b50d48006101_8 uint32
				zgensym_1ba4b50d48006101_8, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Colors) >= int(zgensym_1ba4b50d48006101_8) {
					z.Colors = (z.Colors)[:zgensym_1ba4b50d48006101_8]
				} else {
					z.Colors = make([]string, zgensym_1ba4b50d48006101_8)
				}
				for zgensym_1ba4b50d48006101_0 := range z.Colors {
					z.Colors[zgensym_1ba4b50d48006101_0], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_1ba4b50d48006101_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ZColorGroup
var unmarshalMsgFieldOrder6zgensym_1ba4b50d48006101_7 = []string{"id", "name", "colors"}

var unmarshalMsgFieldSkip6zgensym_1ba4b50d48006101_7 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ZColorGroup) Msgsize() (s int) {
	s = 1 + 15 + msgp.IntSize + 15 + msgp.StringPrefixSize + len(z.Name) + 15 + msgp.ArrayHeaderSize
	for zgensym_1ba4b50d48006101_0 := range z.Colors {
		s += msgp.StringPrefixSize + len(z.Colors[zgensym_1ba4b50d48006101_0])
	}
	return
}

// FileZebrapack_data holds ZebraPack schema from file 'zebrapack_data.go'
type FileZebrapack_data struct{}

// ZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 483 bytes
func (FileZebrapack_data) ZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x83, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xb1, 0x7a, 0x65, 0x62, 0x72, 0x61, 0x70, 0x61,
		0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f,
		0xad, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63,
		0x6b, 0x61, 0x67, 0x65, 0xa9, 0x67, 0x6f, 0x73, 0x65, 0x72,
		0x63, 0x6f, 0x6d, 0x70, 0xa7, 0x53, 0x74, 0x72, 0x75, 0x63,
		0x74, 0x73, 0x81, 0xab, 0x5a, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
		0x47, 0x72, 0x6f, 0x75, 0x70, 0x82, 0xaa, 0x53, 0x74, 0x72,
		0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xab, 0x5a, 0x43,
		0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xa6,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x93, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x49, 0x64, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xa2, 0x69, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e,
		0x74, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x0d, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x0d, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e,
		0x74, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa4,
		0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x6e, 0x61,
		0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69,
		0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73,
		0x74, 0x72, 0x69, 0x6e, 0x67, 0x86, 0xa3, 0x5a, 0x69, 0x64,
		0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa6, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xa6, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa8, 0x5b, 0x5d, 0x73, 0x74, 0x72, 0x69,
		0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xa3, 0x53,
		0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xa6, 0x44,
		0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67,
	}
}

// ZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 613 bytes
func (FileZebrapack_data) ZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"zebrapack_data.go","SourcePackage":"gosercomp","Structs":{"ZColorGroup":{"StructName":"ZColorGroup","Fields":[{"Zid":0,"FieldGoName":"Id","FieldTagName":"id","FieldTypeStr":"int","FieldCategory":23,"FieldPrimitive":13,"FieldFullType":{"Kind":13,"Str":"int"}},{"Zid":1,"FieldGoName":"Name","FieldTagName":"name","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":2,"FieldGoName":"Colors","FieldTagName":"colors","FieldTypeStr":"[]string","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":2,"Str":"string"}}}]}}}`)
}

// ZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 1569 bytes
func (FileZebrapack_data) ZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "zebrapack_data.go",
    "SourcePackage": "gosercomp",
    "Structs": {
        "ZColorGroup": {
            "StructName": "ZColorGroup",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Id",
                    "FieldTagName": "id",
                    "FieldTypeStr": "int",
                    "FieldCategory": 23,
                    "FieldPrimitive": 13,
                    "FieldFullType": {
                        "Kind": 13,
                        "Str": "int"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Name",
                    "FieldTagName": "name",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "Colors",
                    "FieldTagName": "colors",
                    "FieldTypeStr": "[]string",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 2,
                            "Str": "string"
                        }
                    }
                }
            ]
        }
    }
}`)
}
